/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    get: {
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/tenant/{uuid}/flow/create": {
    post: {
      parameters: {
        path: {
          uuid: components["parameters"]["uuid"];
        };
      };
      /** @description Create a dev flow */
      requestBody: {
        content: {
          "application/json": components["schemas"]["DevFlowSpec"];
        };
      };
      responses: {
        /** @description Dev flow creation status */
        200: {
          content: {
            "application/json": components["schemas"]["DevFlow"];
          };
        };
      };
    };
  };
  "/tenant/{uuid}/flows": {
    get: {
      parameters: {
        path: {
          uuid: components["parameters"]["uuid"];
        };
      };
      responses: {
        /** @description Dev flow creation status */
        200: {
          content: {
            "application/json": components["schemas"]["DevFlow"][];
          };
        };
      };
    };
  };
  "/tenant/{uuid}/flow/{flow-id}/delete": {
    post: {
      parameters: {
        path: {
          uuid: components["parameters"]["uuid"];
          "flow-id": components["parameters"]["flow-id"];
        };
      };
      /** @description Delete dev flow (revert back to prod only) */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProdFlowSpec"];
        };
      };
      responses: {
        /** @description Dev flow creation status */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/tenant/{uuid}/deploy": {
    post: {
      parameters: {
        path: {
          uuid: components["parameters"]["uuid"];
        };
      };
      /** @description Deploy a prod only cluster */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProdFlowSpec"];
        };
      };
      responses: {
        /** @description Dev flow creation status */
        200: {
          content: {
            "application/json": components["schemas"]["DevFlow"];
          };
        };
      };
    };
  };
  "/tenant/{uuid}/topology": {
    get: {
      parameters: {
        path: {
          uuid: components["parameters"]["uuid"];
        };
      };
      responses: {
        /** @description Topology information */
        200: {
          content: {
            "application/json": components["schemas"]["ClusterTopology"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ProdFlowSpec: {
      "service-configs"?: components["schemas"]["ServiceConfig"][];
    };
    DevFlow: {
      "dev-flow-id"?: string;
    };
    DevFlowSpec: {
      /** @example backend-a:latest */
      "image-locator"?: string;
      /** @example backend-service-a */
      "service-name"?: string;
      "service-configs"?: components["schemas"]["ServiceConfig"][];
    };
    Node: {
      /** @description Unique identifier for the node. */
      id: string;
      /** @description Label for the node. */
      label?: string;
      /**
       * @description Type of the node
       * @enum {string}
       */
      type: "gateway" | "service" | "service-version" | "redis";
      /** @description Parent node */
      parent?: string;
    };
    Edge: {
      /** @description The identifier of the source node of the edge. */
      source: string;
      /** @description The identifier of the target node of the edge. */
      target: string;
      /** @description Label for the edge. */
      label?: string;
    };
    ClusterTopology: {
      nodes: components["schemas"]["Node"][];
      edges: components["schemas"]["Edge"][];
    };
    ServiceConfig: {
      service: unknown;
      deployment: unknown;
    };
  };
  responses: never;
  parameters: {
    /** @description UUID of the resource */
    uuid: string;
    /** @description Flow identifier */
    "flow-id": string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
