openapi: 3.0.0

info:
  title: CLI/Kontrol API
  version: 1.0.0

paths:
  /health:
    description: For health check control
    get:
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: string

  /tenant/{uuid}/flow/create:
    post:
      parameters:
        - $ref: "#/components/parameters/uuid"
      requestBody:
        description: Create a dev flow using FlowSpec, optionally with a TemplateSpec
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flowSpec:
                  $ref: "#/components/schemas/FlowSpec"
                templateSpec:
                  $ref: "#/components/schemas/TemplateSpec"
              required:
                - flowSpec
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "200":
          description: Flow creation status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flow"

  /tenant/{uuid}/flows:
    get:
      parameters:
        - $ref: "#/components/parameters/uuid"
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "200":
          description: Dev flow creation status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Flow"

  /tenant/{uuid}/flow/{flowId}:
    delete:
      parameters:
        - $ref: "#/components/parameters/uuid"
        - $ref: "#/components/parameters/flowId"
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "2xx":
          description: Dev flow deletion status

  /tenant/{uuid}/deploy:
    post:
      parameters:
        - $ref: "#/components/parameters/uuid"
      requestBody:
        description: Deploy a prod only cluster
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MainClusterConfig"
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "200":
          description: Dev flow creation status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flow"

  /tenant/{uuid}/topology:
    get:
      parameters:
        - $ref: "#/components/parameters/uuid"
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "200":
          description: Topology information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterTopology"

  /tenant/{uuid}/templates/create:
    post:
      parameters:
        - $ref: "#/components/parameters/uuid"
      requestBody:
        description: Create a new template
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateConfig"
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "200":
          description: Template creation status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"

  /tenant/{uuid}/templates:
    get:
      parameters:
        - $ref: "#/components/parameters/uuid"
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "200":
          description: List of templates for the given tenant
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Template"

  /tenant/{uuid}/templates/{templateName}:
    delete:
      parameters:
        - $ref: "#/components/parameters/uuid"
        - $ref: "#/components/parameters/templateName"
      responses:
        "500":
          $ref: "#/components/responses/Error"
        "404":
          $ref: "#/components/responses/NotFound"
        "2xx":
          description: Template deletion status

  /tenant/{uuid}/manifest:
    get:
      tags:
        - tenant
        - manifest
      summary: Cluster resource definition in a manifest YAML response
      description: This endpoint returns all the Kubernetes resource for the cluster topology in one multi-resource manifest response
      parameters:
        - $ref: "#/components/parameters/uuid"
      responses:
        '500':
          $ref: "#/components/responses/Error"
        '404':
          $ref: "#/components/responses/NotFound"
        '200':
          description: Successful response
          content:
            application/x-yaml:
              schema:
                type: string

components:
  responses:
    Error:
      description: Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: Error type
              msg:
                type: string
                description: Error message
            required:
              - error

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              resourceType:
                type: string
                description: Resource type
              id:
                type: string
                description: Resource ID
            required:
              - resourceType
              - id
  parameters:
    uuid:
      name: uuid
      in: path
      required: true
      description: UUID of the resource
      schema:
        type: string

    flowId:
      name: flowId
      in: path
      required: true
      description: Flow identifier
      schema:
        type: string


    templateName:
      name: templateName
      in: path
      required: true
      description: name of the template
      schema:
        type: string

  schemas:
    MainClusterConfig:
      type: object
      properties:
        serviceConfigs:
          type: array
          items:
            $ref: "#/components/schemas/ServiceConfig"
        ingressConfigs:
          type: array
          items:
            $ref: "#/components/schemas/IngressConfig"
        namespace:
          type: string

    Flow:
      type: object
      properties:
        flowId:
          type: string
        flowUrls:
          type: array
          items:
            type: string
        isBaseline:
          type: boolean
      required:
        - flowId
        - flowUrls

    FlowSpec:
      type: array
      items:
        type: object
        properties:
          imageLocator:
            type: string
            example: backend-a:latest
          serviceName:
            type: string
            example: backend-service-a
        required:
          - imageLocator
          - serviceName

    TemplateSpec:
      type: object
      properties:
        templateName:
          type: string
          description: name of the template
        arguments:
          type: object
          additionalProperties: true
      required:
        - templateName

    Node:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the node.
        label:
          type: string
          description: Label for the node.
        type:
          type: string
          enum: [gateway, service, external]
          description: Type of the node
        versions:
          type: array
          description: Node versions
          items:
            $ref: "#/components/schemas/NodeVersion"
      required:
        - id
        - type
        - label

    NodeVersion:
      type: object
      properties:
        flowId:
          type: string
        imageTag:
          type: string
        isBaseline:
          type: boolean
      required:
        - flowId
        - isBaseline

    Edge:
      type: object
      properties:
        source:
          type: string
          description: The identifier of the source node of the edge.
        target:
          type: string
          description: The identifier of the target node of the edge.
        label:
          type: string
          description: Label for the edge.
      required:
        - source
        - target

    ClusterTopology:
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Node"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/Edge"
      required:
        - nodes
        - edges

    ServiceConfig:
      type: object
      properties:
        service:
          x-go-type: corev1.Service
          x-go-type-import:
            path: k8s.io/api/core/v1
            name: corev1
        deployment:
          x-go-type: appv1.Deployment
          x-go-type-import:
            path: k8s.io/api/apps/v1
            name: appv1
      required:
        - service
        - deployment

    TemplateConfig:
      type: object
      properties:
        service:
          type: array
          items:
            # TODO(gm) - is there a way to use the k8s types in TS
            x-go-type: corev1.Service
            x-go-type-import:
              path: k8s.io/api/core/v1
              name: corev1
        name:
          type: string
          description: The name to give the template
        description:
          type: string
          description: The description of the template
      required:
        - service
        - name

    Template:
      type: object
      properties:
        templateId:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - templateId
        - name

    IngressConfig:
      type: object
      properties:
        ingress:
          x-go-type: networkingv1.Ingress
          x-go-type-import:
            path: k8s.io/api/networking/v1
            name: networkingv1
      required:
        - ingress
